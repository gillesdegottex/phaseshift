name: FFTScarf - Build, Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with ${{ matrix.c_compiler }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-24.04, macos-14, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-14
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          - os: ubuntu-24.04
            c_compiler: cl
          - os: macos-14
            c_compiler: cl
          - os: macos-14
            c_compiler: gcc
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Doesnt't help find libraries on Windows workers
    # - name: Add paths for Windows builds
    #   run: |
    #     echo "C:/Program Files/libsndfile/bin/" >> $GITHUB_PATH

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/ext/fftscarf/build" >> "$GITHUB_OUTPUT"

    - name: Configure with CMake
      if: matrix.os == 'ubuntu-24.04'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}        
        -DFFTSCARF_FFT_FFTREAL=ON
        -DFFTSCARF_FFT_OOURA=ON
        -DFFTSCARF_FFT_PFFFT=ON
        -DFFTSCARF_FFT_FFTS=ON
        -S ${{ github.workspace }}/ext/fftscarf

    - name: Configure with CMake
      if: matrix.os == 'macos-14'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}        
        -DFFTSCARF_FFT_FFTREAL=ON
        -DFFTSCARF_FFT_OOURA=ON
        -DFFTSCARF_FFT_VDSP=ON
        -S ${{ github.workspace }}/ext/fftscarf

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
